{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2024-12-05T04:10:30.603220Z", "invocation_id": "9aab4967-282e-4793-92ca-58373499bec0", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.503172Z", "completed_at": "2024-12-05T04:10:28.513899Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.514449Z", "completed_at": "2024-12-05T04:10:28.638333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13675498962402344, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.base_pipedrive__fields", "compiled": true, "compiled_code": "-- Simple base model to connect to the source table\n-- This table has JSON array values that need to be unpacked\n-- Those unpacked values will be set up as reference nodes in the staging layer\nSELECT *\nFROM \"postgres\".\"public\".\"fields\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.644447Z", "completed_at": "2024-12-05T04:10:28.648992Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.649678Z", "completed_at": "2024-12-05T04:10:28.704087Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06118583679199219, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__activity", "compiled": true, "compiled_code": "-- Type is a reserved keyword. Renaming.\n-- Rename others for consistency with other models\n    -- model.id, model.reference_model_id\n    -- bools are prefixed with is_ or has_\n    -- convert date strings to timestamps and rename\n-- add calculated month fields that will be used downstream\nWITH base_activity AS (\n    SELECT\n        activity_id AS id,\n        type AS activity_type,\n        assigned_to_user AS user_id,\n        deal_id,\n        done AS is_done,\n        due_to::TIMESTAMP AS due_time\n    FROM \"postgres\".\"public\".\"activity\"\n)\nSELECT \n    id,\n    activity_type,\n    user_id,\n    deal_id,\n    is_done,\n    due_time,\n    \n    EXTRACT(MONTH FROM due_time) AS month_number,\n    TO_CHAR(due_time, 'Month') AS month_name\n\nFROM base_activity", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.709248Z", "completed_at": "2024-12-05T04:10:28.712461Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.712968Z", "completed_at": "2024-12-05T04:10:28.765416Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0578000545501709, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__activity_types", "compiled": true, "compiled_code": "-- Type and Name are reserved keywords. Renaming.\n-- The `active` column is a string with just two possible value. It makes more sense as a bool\nSELECT\n    id,\n    name AS activity_name,\n    CASE\n        WHEN active = 'Yes' THEN TRUE\n        ELSE FALSE\n    END AS is_active,\n    type AS activity_type\nFROM \"postgres\".\"public\".\"activity_types\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.771454Z", "completed_at": "2024-12-05T04:10:28.777251Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.779188Z", "completed_at": "2024-12-05T04:10:28.831331Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06142902374267578, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__deal_changes", "compiled": true, "compiled_code": "-- This is not a source deals table, and deal_id is not a PK (UNIQUE)\n    -- leave deal_id named as is to be consistent with naming convention model.reference_model_id\n    -- convert date strings to timestamps and rename\n-- add calculated month fields that will be used downstream\nWITH base_deal_changes AS (\n    SELECT\n        deal_id,\n        change_time::TIMESTAMP AS change_time,\n        changed_field_key,\n        new_value\n    FROM \"postgres\".\"public\".\"deal_changes\"\n)\nSELECT\n    deal_id,\n    changed_field_key,\n    new_value,\n    change_time,\n    \n    EXTRACT(MONTH FROM change_time) AS month_number,\n    TO_CHAR(change_time, 'Month') AS month_name\n\nFROM base_deal_changes", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.837028Z", "completed_at": "2024-12-05T04:10:28.840354Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.840848Z", "completed_at": "2024-12-05T04:10:28.890585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05521893501281738, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__stages", "compiled": true, "compiled_code": "/* NOT USED UPSTREAM. \n    The values in this table also found in the JSON array of base_pipedrive__fields.\n    I would rather standardise the way stages and lost_reasons are handled.\n    My assumption is that base_pipedrive__fields holds the current values configured in the Pipedrive application,\n    and if this were to be updated by a sysadmin, the static version of the stages table would not reflect the changes.\nNOT USED UPSTREAM. */\n\n-- Rename stage_id to id for consistency: model.id, model.reference_model_id\nSELECT\n    stage_id AS id,\n    stage_name\nFROM \"postgres\".\"public\".\"stages\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__stages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:28.895594Z", "completed_at": "2024-12-05T04:10:28.899324Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:28.899839Z", "completed_at": "2024-12-05T04:10:29.027558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1336688995361328, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__users", "compiled": true, "compiled_code": "-- Name is a reserved keyword. Renaming.\n-- Convert date strings to timestamps and rename\n-- Add calculated month fields that will be used downstream\nWITH base_users AS (\n    SELECT\n        id,\n        name AS user_name,\n        email AS user_email,\n        modified::TIMESTAMP AS modified_time\n    FROM \"postgres\".\"public\".\"users\"\n)\nSELECT\n    id,\n    user_name,\n    user_email,\n    modified_time,\n    \n    EXTRACT(MONTH FROM modified_time) AS month_number,\n    TO_CHAR(modified_time, 'Month') AS month_name\n\nFROM base_users", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.033406Z", "completed_at": "2024-12-05T04:10:29.033413Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.033891Z", "completed_at": "2024-12-05T04:10:29.114969Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08334708213806152, "adapter_response": {"_message": "INSERT 2", "code": "INSERT", "rows_affected": 2}, "message": "INSERT 2", "failures": null, "unique_id": "seed.enpal_assessment_project.minor_stages", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.119534Z", "completed_at": "2024-12-05T04:10:29.122906Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.123435Z", "completed_at": "2024-12-05T04:10:29.167700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04979205131530762, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__fields_lost_reasons", "compiled": true, "compiled_code": "-- `base_pipedrive__fields` model has the values buried in a JSON array.\n-- Make sure ids are INTEGER and not numeric-looking STRING \n\t-- it is better to convert here even though CASTING is also required in the referential test.\n\t-- because in the real world, collaborators would be confused to see numeric-looking values as STRINGs.\nWITH expand_array AS (\n\tSELECT \n\t\tjsonb_array_elements(field_value_options) AS field_value_options\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\"\n\tWHERE field_key = 'lost_reason'\n)\nSELECT\n\tCAST(field_value_options ->> 'id' AS INTEGER) AS id,\n\tfield_value_options ->> 'label' AS label\nFROM expand_array", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.173861Z", "completed_at": "2024-12-05T04:10:29.176906Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.177346Z", "completed_at": "2024-12-05T04:10:29.224129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.051834821701049805, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__fields_stages", "compiled": true, "compiled_code": "-- `base_pipedrive__fields` model has the values buried in a JSON array.\n-- Make sure ids are INTEGER and not numeric-looking STRING \n\t-- it is better to convert here even though CASTING is also required in the referential test.\n\t-- because in the real world, collaborators would be confused to see numeric-looking values as STRINGs.\nWITH expand_array AS (\n\tSELECT \n\t\tjsonb_array_elements(field_value_options) AS field_value_options\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\"\n\tWHERE field_key = 'stage_id'\n)\nSELECT\n\tCAST(field_value_options ->> 'id' AS INTEGER) AS id,\n\tfield_value_options ->> 'label' AS label\nFROM expand_array", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.229200Z", "completed_at": "2024-12-05T04:10:29.242891Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.243378Z", "completed_at": "2024-12-05T04:10:29.286669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06069302558898926, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_deal_id.baf61bb80e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere deal_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.292664Z", "completed_at": "2024-12-05T04:10:29.297161Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.297709Z", "completed_at": "2024-12-05T04:10:29.324915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03578591346740723, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_due_time.a110302191", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect due_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere due_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.332477Z", "completed_at": "2024-12-05T04:10:29.337514Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.337994Z", "completed_at": "2024-12-05T04:10:29.365590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036746978759765625, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_id.5590c96fbb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.371369Z", "completed_at": "2024-12-05T04:10:29.376047Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.376498Z", "completed_at": "2024-12-05T04:10:29.404662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036411285400390625, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_is_done.1d7811c543", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_done\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere is_done is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.410597Z", "completed_at": "2024-12-05T04:10:29.472614Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.473146Z", "completed_at": "2024-12-05T04:10:29.502271Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09501004219055176, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.relationships_stg_pipedrive__activity_activity_type__activity_type__ref_stg_pipedrive__activity_types_.7370c13ee8", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select activity_type as from_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\n    where activity_type is not null\n),\n\nparent as (\n    select activity_type as to_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.508561Z", "completed_at": "2024-12-05T04:10:29.520853Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.521339Z", "completed_at": "2024-12-05T04:10:29.552393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.047061920166015625, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.accepted_values_stg_pipedrive__deal_changes_changed_field_key__user_id__stage_id__lost_reason__add_time.84526954c0", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        changed_field_key as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n    group by changed_field_key\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'user_id','stage_id','lost_reason','add_time'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.558569Z", "completed_at": "2024-12-05T04:10:29.561842Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.562343Z", "completed_at": "2024-12-05T04:10:29.595196Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04027295112609863, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_timestamp_equal_add_time_new_value", "compiled": true, "compiled_code": "-- Proving that the new_value field for add_time changes is redundant. We can just use the change_time.\nSELECT * FROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'add_time'\n\tAND change_time != new_value::TIMESTAMP", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.601772Z", "completed_at": "2024-12-05T04:10:29.606763Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.607391Z", "completed_at": "2024-12-05T04:10:29.636247Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03951692581176758, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_change_time.aa9805807d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect change_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere change_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.643340Z", "completed_at": "2024-12-05T04:10:29.647914Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.648394Z", "completed_at": "2024-12-05T04:10:29.677303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03711891174316406, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_deal_id.6ebfdbb65d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere deal_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.682758Z", "completed_at": "2024-12-05T04:10:29.687463Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.687930Z", "completed_at": "2024-12-05T04:10:29.714880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035272836685180664, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_new_value.bb225b4f96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect new_value\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere new_value is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.720774Z", "completed_at": "2024-12-05T04:10:29.727795Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.728253Z", "completed_at": "2024-12-05T04:10:29.760096Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042520999908447266, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_user_references_user_id", "compiled": true, "compiled_code": "-- CTE to pre-filter deal_changes for stage_id changes\n-- to safely cast new_value to an integer when we're sure all the values can be implicitly casted\nWITH deal_change_user AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'user_id'\n\n)\nSELECT *\nFROM deal_change_user d\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\" u\nON CAST(d.new_value AS INTEGER) = u.id\nWHERE u.id IS NULL -- Any non referential values in d will return a NULL s.id", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.765412Z", "completed_at": "2024-12-05T04:10:29.770444Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.771085Z", "completed_at": "2024-12-05T04:10:29.798071Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03578495979309082, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_id.2e370a8817", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.803964Z", "completed_at": "2024-12-05T04:10:29.808503Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.808958Z", "completed_at": "2024-12-05T04:10:29.835187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035736083984375, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_modified_time.03287111d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect modified_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere modified_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.842217Z", "completed_at": "2024-12-05T04:10:29.846754Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.847331Z", "completed_at": "2024-12-05T04:10:29.874057Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03505206108093262, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_user_email.ea967e8157", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_email\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere user_email is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.880554Z", "completed_at": "2024-12-05T04:10:29.885275Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.885752Z", "completed_at": "2024-12-05T04:10:29.922020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04550600051879883, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_user_name.3145d7edb5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_name\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere user_name is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.928943Z", "completed_at": "2024-12-05T04:10:29.937111Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.937879Z", "completed_at": "2024-12-05T04:10:29.969862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.044100046157836914, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.relationships_stg_pipedrive__activity_user_id__id__ref_stg_pipedrive__users_.d7739cfd5d", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\n    where user_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:29.975597Z", "completed_at": "2024-12-05T04:10:29.981253Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:29.981783Z", "completed_at": "2024-12-05T04:10:30.010835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03845500946044922, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_stage_references_lost_reason_id", "compiled": true, "compiled_code": "-- new_value field is a STRING type but contains mixed values for other tables/models\n-- The CTE will pre-filter the deal_changes to safely cast new_value to an integer for this test\nWITH deal_change_reasons AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'lost_reason'\n\n)\nSELECT *\nFROM deal_change_reasons dcr\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\" reasons\nON CAST(dcr.new_value AS INTEGER) = reasons.id\nWHERE reasons.id IS NULL -- Any non referential values in dcr will return a NULL reasons.id", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.016898Z", "completed_at": "2024-12-05T04:10:30.020404Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.020870Z", "completed_at": "2024-12-05T04:10:30.052864Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03922915458679199, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_stage_references_stage_id", "compiled": true, "compiled_code": "-- new_value field is a STRING type but contains mixed values for other tables/models\n-- The CTE will pre-filter the deal_changes to safely cast new_value to an integer for this test\nWITH deal_change_stage AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'stage_id'\n\n)\nSELECT *\nFROM deal_change_stage dcs\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\" stages\nON CAST(dcs.new_value AS INTEGER) = stages.id\nWHERE stages.id IS NULL -- Any non referential values in d will return a NULL s.id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.064580Z", "completed_at": "2024-12-05T04:10:30.068607Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.069087Z", "completed_at": "2024-12-05T04:10:30.113667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.050595998764038086, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_new_deal", "compiled": true, "compiled_code": "-- This intermediate model does the following:\n\t-- Separates new deals from the deal_changes model\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t  -- Assumption: deals should not have more than one added date\n\t  -- Assumption: the latest added date is the one that should be presented to the model\n\t  -- Method: simple MAX\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nSELECT\n\tdeal_id, \n\tMAX(change_time) AS created_time\nFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE changed_field_key = 'add_time'\nGROUP BY\n\tdeal_id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.124124Z", "completed_at": "2024-12-05T04:10:30.127937Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.128404Z", "completed_at": "2024-12-05T04:10:30.176558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.053926944732666016, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_lost_reason", "compiled": true, "compiled_code": "-- This intermediate model does the following:\n\t-- Separates the lost reason from the deal_changes model\n\t-- Adds the friendly lost reason label to the deal_changes data.\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t\t-- Assumption: deals should not have more than one lost reason\n\t\t-- Assumption: the latest lost reason is the one that should be presented to the model\n\t\t-- Method: row_number in reverse order and then pick the first row. \n\t\t-- This pattern is better when we don't know how many duplicate rows there could be, but the latest will always be row number 1.\n\t\t-- Can't just take MAX(new_value) as was done for new_deals, because that would pick the largest given lost reason id, which would be incorrect.\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nWITH deal_changes_lost_reason AS (\n\tSELECT\n\t\tROW_NUMBER() OVER(PARTITION BY deal_id ORDER BY change_time DESC) AS reverse_order,\n\t\tdeal_id,\n\t\tnew_value AS lost_reason_id,\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'lost_reason'\n),\ndeal_changes_lost_reason_cast_id AS (\n\tSELECT\n\t\tdeal_id,\n\t\tCAST(lost_reason_id AS INTEGER) AS lost_reason_id, -- do it here once rather than twice in the final select & join clauses\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM deal_changes_lost_reason\n\tWHERE reverse_order = 1\n)\nSELECT\ndcr.deal_id,\ndcr.lost_reason_id,\nlost_reasons.label,\ndcr.change_time,\ndcr.month_name,\ndcr.month_number\nFROM deal_changes_lost_reason_cast_id dcr\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\" lost_reasons\nON dcr.lost_reason_id = lost_reasons.id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_lost_reason\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.181606Z", "completed_at": "2024-12-05T04:10:30.185553Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.186007Z", "completed_at": "2024-12-05T04:10:30.230939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05089306831359863, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_stage", "compiled": true, "compiled_code": "-- This intermediate model does the following:\n\t-- Separates the stages from the deal_changes model\n\t-- Adds the friendly stages label to the deal_changes data.\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t\t-- Assumption: deals should not arrive at the same stage more than once\n\t\t\t-- Note: it might be possible in the real world, but this rule was checked by looking at the deals that also had more than one add date, which definitely seems incorrect.\n\t\t-- Assumption: the latest lost reason is the one that should be presented to the model\n\t\t-- Method: row_number in reverse order and then pick the first row. \n\t\t-- This pattern is better when we don't know how many duplicate rows there could be, but the latest will always be row number 1.\n\t\t-- Can't just take MAX(new_value) as was done for new_deals, because that would pick the largest given lost reason id, which would be incorrect.\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nWITH deal_changes_stage AS (\n\tSELECT\n\t\tROW_NUMBER() OVER(PARTITION BY deal_id, new_value ORDER BY new_value, change_time DESC) AS reverse_order,\n\t\tdeal_id,\n\t\tnew_value AS stage_id,\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'stage_id'\n),\ndeal_changes_stage_cast_id AS (\n\tSELECT\n\t\tdeal_id,\n\t\tCAST(stage_id AS INTEGER) AS stage_id, -- do it here once rather than twice in the final select & join clauses\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM deal_changes_stage\n\tWHERE reverse_order = 1\n)\nSELECT\ndcs.deal_id,\ndcs.stage_id,\nstages.label,\ndcs.change_time,\ndcs.month_name,\ndcs.month_number\nFROM deal_changes_stage_cast_id dcs\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\" stages\nON dcs.stage_id = stages.id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.236196Z", "completed_at": "2024-12-05T04:10:30.243090Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.243548Z", "completed_at": "2024-12-05T04:10:30.273334Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04030895233154297, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.unique_int_deal_changes_dedupe_new_deal_deal_id.1fb728a0fc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\"\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.279145Z", "completed_at": "2024-12-05T04:10:30.283760Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.284248Z", "completed_at": "2024-12-05T04:10:30.317469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0415492057800293, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.unique_int_deal_changes_dedupe_lost_reason_deal_id.9dd6535907", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_lost_reason\"\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.323230Z", "completed_at": "2024-12-05T04:10:30.326780Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.327223Z", "completed_at": "2024-12-05T04:10:30.374753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05481982231140137, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_unique_deal_stage", "compiled": true, "compiled_code": "-- Assert that there are no duplicate deal-stage pairs in the deal changes table\nSELECT\n    COUNT(*),\n    deal_id,\n    stage_id\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\"\nGROUP BY\n    deal_id,\n    stage_id\nHAVING COUNT(*) > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.393616Z", "completed_at": "2024-12-05T04:10:30.404060Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.404537Z", "completed_at": "2024-12-05T04:10:30.522641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1309499740600586, "adapter_response": {"_message": "SELECT 8895", "code": "SELECT", "rows_affected": 8895}, "message": "SELECT 8895", "failures": null, "unique_id": "model.enpal_assessment_project.mrt_deals_stages", "compiled": true, "compiled_code": "-- This mart model provides a breakdown by month of all deals and their stages, minor stages, and activities.\nWITH  __dbt__cte__int_activity_join_activity_type as (\n-- Simple intermediate model to join activity and activity_types\n-- thus providing the friendly name of the activity type for downstream models\nSELECT\n\ta.user_id,\n\ta.deal_id,\n\tt.activity_name,\n\tms.stage_id,\n\tms.minor_stage_id,\n\tt.is_active, -- this would be a mart level filter: business logic determines when to include deactivated activity types\n\ta.is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n\ta.due_time,\n\ta.month_name,\n\ta.month_number\nFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\" a\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\" t\n\tON a.activity_type = t.activity_type\nINNER JOIN \"postgres\".\"public\".\"minor_stages\" ms\n\tON t.activity_type = ms.activity_type\n),  __dbt__cte__int_deal_changes_activity as (\n-- brings in the activity data for deals in the deal_changes table with the same deal_id\n-- These will just be the ones with call activities against them\n\n-- Note that there are very few rows compared to the total number of deals\n-- Potential problem? Why are there so many rows in the activity table with deal ids that don't exist in the deal_changes table?\n\nSELECT\n    nd.deal_id,\n    act.activity_name,\n    act.stage_id,\n    act.minor_stage_id,\n    act.is_active, -- this would be a mart level filter: business logic determines when to include deactivated activity types\n    act.is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n    act.month_number,\n    act.month_name\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\" nd\nINNER JOIN __dbt__cte__int_activity_join_activity_type act -- result of INNER JOIN is very few rows. Is it a problem?\nON nd.deal_id = act.deal_id\n), all_deal_changes_and_activity AS (\n    SELECT\n        deal_id,\n        stage_id,\n        minor_stage_id,\n        is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n        activity_name AS label,\n        month_name,\n        month_number\n    FROM __dbt__cte__int_deal_changes_activity\n    WHERE is_active = TRUE -- Mart level filter, most business users will ignore e.g. 'Follow Up Call' that is set to be inactive\n    UNION ALL\n    SELECT\n        deal_id,\n        stage_id,\n        NULL AS minor_stage_id,\n        NULL AS is_done,\n        label,\n        month_name,\n        month_number\n    FROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\"\n)\nSELECT\n    nd.deal_id,\n    dca.stage_id,\n    dca.minor_stage_id,\n    dca.is_done,\n    dca.label,\n    dca.month_name,\n    dca.month_number\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\" nd -- Only deals from the deal_changes model (these have a created_time)\nLEFT OUTER JOIN all_deal_changes_and_activity dca -- This will pick up the minor stages/activities where they exist for this set of deals\n    ON nd.deal_id = dca.deal_id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"mrt_deals_stages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T04:10:30.528460Z", "completed_at": "2024-12-05T04:10:30.531914Z"}, {"name": "execute", "started_at": "2024-12-05T04:10:30.532356Z", "completed_at": "2024-12-05T04:10:30.576613Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04978799819946289, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.rep_sales_funnel_monthly", "compiled": true, "compiled_code": "-- ASSUMPTIONS FOR THIS MODEL:\n-- Show the number of deals in each stage of the sales funnel, for each month\n    -- Although we have models for users, they are not needed/requested in this model\n    -- Although we have models for lost deals\n        -- we are showing the stage the deal was in at the time of the activity \n        -- whether or not it was closed in the end\n        -- If it was not closed in the end, it just doesn't get counted in the Closing or later stages\n        -- so it doesn't appear necessary to use the lost reasons model\n\n-- create the funnel steps as requested\nWITH funnel_step_from_stages AS (\n\tSELECT\n\t\tdeal_id,\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tCONCAT(stage_id, \n\t\t\tCASE\n\t\t\t\tWHEN minor_stage_id IS NULL THEN ''\n\t\t\t\tELSE CONCAT('.', minor_stage_id)\n\t\t\tEND\n\t\t) AS funnel_step,\n\t\tlabel AS kpi_name\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"mrt_deals_stages\" AS funnel\n    WHERE COALESCE(is_done, TRUE) -- report level filter: exclude incomplete activities\n),\n-- aggregate CTE then order, to avoid having to keep the order columns in the view\nmonthly_agg AS (\n\tSELECT\n\t\tCOUNT(deal_id) AS deals_count,\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tfunnel_step,\n\t\tkpi_name\n\tFROM funnel_step_from_stages\n\tGROUP BY\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tfunnel_step,\n\t\tkpi_name\n)\n-- final query with ordering\nSELECT\n\tmonth_name AS month,\n\tkpi_name,\n\tfunnel_step,\n\tdeals_count\n\tFROM monthly_agg\nORDER BY month_number, funnel_step", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"rep_sales_funnel_monthly\""}], "elapsed_time": 2.3836658000946045, "args": {"exclude_resource_types": [], "export_saved_queries": false, "exclude": [], "log_file_max_bytes": 10485760, "log_level": "info", "printer_width": 80, "vars": {}, "resource_types": [], "show": false, "version_check": true, "partial_parse_file_diff": true, "profiles_dir": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment", "strict_mode": false, "which": "build", "source_freshness_run_project_hooks": false, "write_json": true, "static_parser": true, "include_saved_query": false, "quiet": false, "populate_cache": true, "log_format": "default", "select": [], "enable_legacy_logger": false, "partial_parse": true, "require_resource_names_without_spaces": false, "cache_selected_only": false, "print": true, "macro_debugging": false, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "project_dir": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment", "show_resource_report": false, "introspect": true, "favor_state": false, "log_level_file": "debug", "invocation_command": "dbt build", "empty": false, "send_anonymous_usage_stats": true, "use_colors_file": true, "defer": false, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "indirect_selection": "eager", "log_path": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment/logs"}}