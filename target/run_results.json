{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2024-12-05T08:44:55.154837Z", "invocation_id": "811d7115-d333-46ff-8e4d-366db989b193", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.140925Z", "completed_at": "2024-12-05T08:44:53.151802Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.152396Z", "completed_at": "2024-12-05T08:44:53.273248Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13399195671081543, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.base_pipedrive__fields", "compiled": true, "compiled_code": "-- Simple base model to connect to the source table\n-- This table has JSON array values that need to be unpacked\n-- Those unpacked values will be set up as reference nodes in the staging layer\nSELECT *\nFROM \"postgres\".\"public\".\"fields\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.279913Z", "completed_at": "2024-12-05T08:44:53.284563Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.285029Z", "completed_at": "2024-12-05T08:44:53.341710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06339287757873535, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__activity", "compiled": true, "compiled_code": "-- Type is a reserved keyword. Renaming.\n-- Rename others for consistency with other models\n    -- model.id, model.reference_model_id\n    -- bools are prefixed with is_ or has_\n    -- convert date strings to timestamps and rename\n-- add calculated month fields that will be used downstream\n\n-- Potential problem? Activity ids are not unique on their own.\n    -- Combinations repeating activity id with all other columns\n    -- Not useful to create a composite unique check\n    -- Does not seem to affect the overall task because the relationship to deal_id is more important\n\nWITH base_activity AS (\n    SELECT\n        activity_id AS id,\n        type AS activity_type,\n        assigned_to_user AS user_id,\n        deal_id,\n        done AS is_done,\n        due_to::TIMESTAMP AS due_time\n    FROM \"postgres\".\"public\".\"activity\"\n)\nSELECT \n    id,\n    activity_type,\n    user_id,\n    deal_id,\n    is_done,\n    due_time,\n    \n    EXTRACT(MONTH FROM due_time) AS month_number,\n    TO_CHAR(due_time, 'Month') AS month_name\n\nFROM base_activity", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.346926Z", "completed_at": "2024-12-05T08:44:53.350399Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.350920Z", "completed_at": "2024-12-05T08:44:53.404091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05874800682067871, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__activity_types", "compiled": true, "compiled_code": "-- Type and Name are reserved keywords. Renaming.\n-- The `active` column is a string with just two possible value. It makes more sense as a bool\nSELECT\n    id,\n    name AS activity_name,\n    CASE\n        WHEN active = 'Yes' THEN TRUE\n        ELSE FALSE\n    END AS is_active,\n    type AS activity_type\nFROM \"postgres\".\"public\".\"activity_types\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.409112Z", "completed_at": "2024-12-05T08:44:53.412693Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.413155Z", "completed_at": "2024-12-05T08:44:53.468445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06092214584350586, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__deal_changes", "compiled": true, "compiled_code": "-- This is not a source deals table, and deal_id is not a PK (UNIQUE)\n    -- leave deal_id named as is to be consistent with naming convention model.reference_model_id\n    -- convert date strings to timestamps and rename\n-- add calculated month fields that will be used downstream\nWITH base_deal_changes AS (\n    SELECT\n        deal_id,\n        change_time::TIMESTAMP AS change_time,\n        changed_field_key,\n        new_value\n    FROM \"postgres\".\"public\".\"deal_changes\"\n)\nSELECT\n    deal_id,\n    changed_field_key,\n    new_value,\n    change_time,\n    \n    EXTRACT(MONTH FROM change_time) AS month_number,\n    TO_CHAR(change_time, 'Month') AS month_name\n\nFROM base_deal_changes", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.473820Z", "completed_at": "2024-12-05T08:44:53.478662Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.479132Z", "completed_at": "2024-12-05T08:44:53.530562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058318138122558594, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__stages", "compiled": true, "compiled_code": "/* NOT USED UPSTREAM. \n    The values in this table also found in the JSON array of base_pipedrive__fields.\n    I would rather standardise the way stages and lost_reasons are handled.\n    My assumption is that base_pipedrive__fields holds the current values configured in the Pipedrive application,\n    and if this were to be updated by a sysadmin, the static version of the stages table would not reflect the changes.\nNOT USED UPSTREAM. */\n\n-- Rename stage_id to id for consistency: model.id, model.reference_model_id\nSELECT\n    stage_id AS id,\n    stage_name\nFROM \"postgres\".\"public\".\"stages\"", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__stages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.535453Z", "completed_at": "2024-12-05T08:44:53.539456Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.539948Z", "completed_at": "2024-12-05T08:44:53.599354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0654458999633789, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__users", "compiled": true, "compiled_code": "/* NOT USED UPSTREAM. \n    The requested report does not call for user information, so this model is not used anywhere upstream.\n\tThis model is created for completeness of the investigative aspects of the task.\nNOT USED UPSTREAM. */\n\n-- Name is a reserved keyword. Renaming.\n-- Convert date strings to timestamps and rename\n-- Add calculated month fields that will be used downstream\nWITH base_users AS (\n    SELECT\n        id,\n        name AS user_name,\n        email AS user_email,\n        modified::TIMESTAMP AS modified_time\n    FROM \"postgres\".\"public\".\"users\"\n)\nSELECT\n    id,\n    user_name,\n    user_email,\n    modified_time,\n    \n    EXTRACT(MONTH FROM modified_time) AS month_number,\n    TO_CHAR(modified_time, 'Month') AS month_name\n\nFROM base_users", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.604713Z", "completed_at": "2024-12-05T08:44:53.604718Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.605128Z", "completed_at": "2024-12-05T08:44:53.744173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14103484153747559, "adapter_response": {"_message": "INSERT 2", "code": "INSERT", "rows_affected": 2}, "message": "INSERT 2", "failures": null, "unique_id": "seed.enpal_assessment_project.minor_stages", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.749165Z", "completed_at": "2024-12-05T08:44:53.752453Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.752904Z", "completed_at": "2024-12-05T08:44:53.795047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04750227928161621, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__fields_lost_reasons", "compiled": true, "compiled_code": "-- `base_pipedrive__fields` model has the values buried in a JSON array.\n-- Make sure ids are INTEGER and not numeric-looking STRING \n\t-- it is better to convert here even though CASTING is also required in the referential test.\n\t-- because in the real world, collaborators would be confused to see numeric-looking values as STRINGs.\nWITH expand_array AS (\n\tSELECT \n\t\tjsonb_array_elements(field_value_options) AS field_value_options\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\"\n\tWHERE field_key = 'lost_reason'\n)\nSELECT\n\tCAST(field_value_options ->> 'id' AS INTEGER) AS id,\n\tfield_value_options ->> 'label' AS label\nFROM expand_array", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.800071Z", "completed_at": "2024-12-05T08:44:53.803664Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.804154Z", "completed_at": "2024-12-05T08:44:53.849887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05158400535583496, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.stg_pipedrive__fields_stages", "compiled": true, "compiled_code": "-- `base_pipedrive__fields` model has the values buried in a JSON array.\n-- Make sure ids are INTEGER and not numeric-looking STRING \n\t-- it is better to convert here even though CASTING is also required in the referential test.\n\t-- because in the real world, collaborators would be confused to see numeric-looking values as STRINGs.\nWITH expand_array AS (\n\tSELECT \n\t\tjsonb_array_elements(field_value_options) AS field_value_options\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"base_pipedrive__fields\"\n\tWHERE field_key = 'stage_id'\n)\nSELECT\n\tCAST(field_value_options ->> 'id' AS INTEGER) AS id,\n\tfield_value_options ->> 'label' AS label\nFROM expand_array", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.855916Z", "completed_at": "2024-12-05T08:44:53.869700Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.870346Z", "completed_at": "2024-12-05T08:44:53.914195Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06156015396118164, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_deal_id.baf61bb80e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere deal_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.920003Z", "completed_at": "2024-12-05T08:44:53.924504Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.925034Z", "completed_at": "2024-12-05T08:44:53.953860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037268877029418945, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_due_time.a110302191", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect due_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere due_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.960797Z", "completed_at": "2024-12-05T08:44:53.965578Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:53.966049Z", "completed_at": "2024-12-05T08:44:53.992700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03548479080200195, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_id.5590c96fbb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:53.998547Z", "completed_at": "2024-12-05T08:44:54.003250Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.003766Z", "completed_at": "2024-12-05T08:44:54.031665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036032915115356445, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__activity_is_done.1d7811c543", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_done\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\nwhere is_done is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.037131Z", "completed_at": "2024-12-05T08:44:54.046725Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.047201Z", "completed_at": "2024-12-05T08:44:54.077502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043992042541503906, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.relationships_stg_pipedrive__activity_activity_type__activity_type__ref_stg_pipedrive__activity_types_.7370c13ee8", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select activity_type as from_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\n    where activity_type is not null\n),\n\nparent as (\n    select activity_type as to_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.084053Z", "completed_at": "2024-12-05T08:44:54.095805Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.096301Z", "completed_at": "2024-12-05T08:44:54.125725Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04491376876831055, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.accepted_values_stg_pipedrive__deal_changes_changed_field_key__user_id__stage_id__lost_reason__add_time.84526954c0", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        changed_field_key as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n    group by changed_field_key\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'user_id','stage_id','lost_reason','add_time'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.131856Z", "completed_at": "2024-12-05T08:44:54.135034Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.135489Z", "completed_at": "2024-12-05T08:44:54.168743Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03998422622680664, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_timestamp_equal_add_time_new_value", "compiled": true, "compiled_code": "-- Proving that the new_value field for add_time changes is redundant. We can just use the change_time.\nSELECT * FROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'add_time'\n\tAND change_time != new_value::TIMESTAMP", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.174493Z", "completed_at": "2024-12-05T08:44:54.179188Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.179757Z", "completed_at": "2024-12-05T08:44:54.205661Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03425097465515137, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_change_time.aa9805807d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect change_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere change_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.211292Z", "completed_at": "2024-12-05T08:44:54.216016Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.216477Z", "completed_at": "2024-12-05T08:44:54.243750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035598039627075195, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_deal_id.6ebfdbb65d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere deal_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.249582Z", "completed_at": "2024-12-05T08:44:54.254062Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.254526Z", "completed_at": "2024-12-05T08:44:54.280768Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.034219980239868164, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__deal_changes_new_value.bb225b4f96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect new_value\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nwhere new_value is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.286446Z", "completed_at": "2024-12-05T08:44:54.291182Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.291821Z", "completed_at": "2024-12-05T08:44:54.320889Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03779721260070801, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_user_references_user_id", "compiled": true, "compiled_code": "-- CTE to pre-filter deal_changes for stage_id changes\n-- to safely cast new_value to an integer when we're sure all the values can be implicitly casted\nWITH deal_change_user AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'user_id'\n\n)\nSELECT *\nFROM deal_change_user d\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\" u\nON CAST(d.new_value AS INTEGER) = u.id\nWHERE u.id IS NULL -- Any non referential values in d will return a NULL s.id", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.326670Z", "completed_at": "2024-12-05T08:44:54.331186Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.331673Z", "completed_at": "2024-12-05T08:44:54.359304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035639047622680664, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_id.2e370a8817", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.364831Z", "completed_at": "2024-12-05T08:44:54.369921Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.370417Z", "completed_at": "2024-12-05T08:44:54.398648Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03676414489746094, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_modified_time.03287111d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect modified_time\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere modified_time is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.404282Z", "completed_at": "2024-12-05T08:44:54.408987Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.409582Z", "completed_at": "2024-12-05T08:44:54.436630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03707575798034668, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_user_email.ea967e8157", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_email\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere user_email is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.445596Z", "completed_at": "2024-12-05T08:44:54.450306Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.450776Z", "completed_at": "2024-12-05T08:44:54.476958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.034648895263671875, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.not_null_stg_pipedrive__users_user_name.3145d7edb5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_name\nfrom \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\nwhere user_name is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.482658Z", "completed_at": "2024-12-05T08:44:54.489077Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.489647Z", "completed_at": "2024-12-05T08:44:54.518062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.038867950439453125, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.relationships_stg_pipedrive__activity_user_id__id__ref_stg_pipedrive__users_.d7739cfd5d", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\"\n    where user_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__users\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.524811Z", "completed_at": "2024-12-05T08:44:54.528559Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.529059Z", "completed_at": "2024-12-05T08:44:54.557366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03585100173950195, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_stage_references_lost_reason_id", "compiled": true, "compiled_code": "-- new_value field is a STRING type but contains mixed values for other tables/models\n-- The CTE will pre-filter the deal_changes to safely cast new_value to an integer for this test\nWITH deal_change_reasons AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'lost_reason'\n\n)\nSELECT *\nFROM deal_change_reasons dcr\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\" reasons\nON CAST(dcr.new_value AS INTEGER) = reasons.id\nWHERE reasons.id IS NULL -- Any non referential values in dcr will return a NULL reasons.id", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.563306Z", "completed_at": "2024-12-05T08:44:54.566926Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.567405Z", "completed_at": "2024-12-05T08:44:54.597806Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037699222564697266, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_change_stage_references_stage_id", "compiled": true, "compiled_code": "-- new_value field is a STRING type but contains mixed values for other tables/models\n-- The CTE will pre-filter the deal_changes to safely cast new_value to an integer for this test\nWITH deal_change_stage AS (\n\t\nSELECT\n    changed_field_key,\n    new_value\nFROM\n    \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE\n    changed_field_key = 'stage_id'\n\n)\nSELECT *\nFROM deal_change_stage dcs\nLEFT OUTER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\" stages\nON CAST(dcs.new_value AS INTEGER) = stages.id\nWHERE stages.id IS NULL -- Any non referential values in d will return a NULL s.id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.609431Z", "completed_at": "2024-12-05T08:44:54.615028Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.615553Z", "completed_at": "2024-12-05T08:44:54.659972Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.052149057388305664, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_new_deal", "compiled": true, "compiled_code": "-- Assumption: the deals in the final report must have an add_time event in the deal changes table.\n\t-- This model provides a master set of valid ids to the upstream mart model.\n\n-- This intermediate model does the following:\n\t-- Separates new deals from the deal_changes model\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t  -- Assumption: deals should not have more than one added date\n\t  -- Assumption: the latest added date is the one that should be presented to the model\n\t  -- Method: simple MAX\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nSELECT\n\tdeal_id, \n\tMAX(change_time) AS created_time\nFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\nWHERE changed_field_key = 'add_time'\nGROUP BY\n\tdeal_id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.671110Z", "completed_at": "2024-12-05T08:44:54.674904Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.675358Z", "completed_at": "2024-12-05T08:44:54.722687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05314207077026367, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_lost_reason", "compiled": true, "compiled_code": "/* NOT USED UPSTREAM. \n    The requested report does not call for lost reason information, so this model is not used anywhere upstream.\n\tThis model is created for completeness and consistent modeling.\nNOT USED UPSTREAM. */\n\n-- This intermediate model does the following:\n\t-- Separates the lost reason from the deal_changes model\n\t-- Adds the friendly lost reason label to the deal_changes data.\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t\t-- Assumption: deals should not have more than one lost reason\n\t\t-- Assumption: the latest lost reason is the one that should be presented to the model\n\t\t-- Method: row_number in reverse order and then pick the first row. \n\t\t-- This pattern is better when we don't know how many duplicate rows there could be, but the latest will always be row number 1.\n\t\t-- Can't just take MAX(new_value) as was done for new_deals, because that would pick the largest given lost reason id, which would be incorrect.\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nWITH deal_changes_lost_reason AS (\n\tSELECT\n\t\tROW_NUMBER() OVER(PARTITION BY deal_id ORDER BY change_time DESC) AS reverse_order,\n\t\tdeal_id,\n\t\tnew_value AS lost_reason_id,\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'lost_reason'\n),\ndeal_changes_lost_reason_cast_id AS (\n\tSELECT\n\t\tdeal_id,\n\t\tCAST(lost_reason_id AS INTEGER) AS lost_reason_id, -- do it here once rather than twice in the final select & join clauses\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM deal_changes_lost_reason\n\tWHERE reverse_order = 1\n)\nSELECT\ndcr.deal_id,\ndcr.lost_reason_id,\nlost_reasons.label,\ndcr.change_time,\ndcr.month_name,\ndcr.month_number\nFROM deal_changes_lost_reason_cast_id dcr\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_lost_reasons\" lost_reasons\nON dcr.lost_reason_id = lost_reasons.id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_lost_reason\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.728227Z", "completed_at": "2024-12-05T08:44:54.733106Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.733825Z", "completed_at": "2024-12-05T08:44:54.781564Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.054963111877441406, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.int_deal_changes_dedupe_stage", "compiled": true, "compiled_code": "-- This intermediate model does the following:\n\t-- Separates the stages from the deal_changes model\n\t-- Adds the friendly stages label to the deal_changes data.\n\t-- Deduplicates a handful of dupe deals in the deal_changes model\n\t\t-- Assumption: deals should not arrive at the same stage more than once\n\t\t\t-- Note: it might be possible in the real world, but this rule was checked by looking at the deals that also had more than one add date, which definitely seems incorrect.\n\t\t-- Assumption: the latest lost reason is the one that should be presented to the model\n\t\t-- Method: row_number in reverse order and then pick the first row. \n\t\t-- This pattern is better when we don't know how many duplicate rows there could be, but the latest will always be row number 1.\n\t\t-- Can't just take MAX(new_value) as was done for new_deals, because that would pick the largest given lost reason id, which would be incorrect.\n\n-- materialized view to apply built-in test unique values after dedupe\n\n\nWITH deal_changes_stage AS (\n\tSELECT\n\t\tROW_NUMBER() OVER(PARTITION BY deal_id, new_value ORDER BY new_value, change_time DESC) AS reverse_order,\n\t\tdeal_id,\n\t\tnew_value AS stage_id,\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__deal_changes\"\n\tWHERE changed_field_key = 'stage_id'\n),\ndeal_changes_stage_cast_id AS (\n\tSELECT\n\t\tdeal_id,\n\t\tCAST(stage_id AS INTEGER) AS stage_id, -- do it here once rather than twice in the final select & join clauses\n\t\tchange_time,\n\t\tmonth_name,\n\t\tmonth_number\n\tFROM deal_changes_stage\n\tWHERE reverse_order = 1\n)\nSELECT\ndcs.deal_id,\ndcs.stage_id,\nstages.label,\ndcs.change_time,\ndcs.month_name,\ndcs.month_number\nFROM deal_changes_stage_cast_id dcs\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__fields_stages\" stages\nON dcs.stage_id = stages.id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.786321Z", "completed_at": "2024-12-05T08:44:54.793783Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.794320Z", "completed_at": "2024-12-05T08:44:54.824429Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04140281677246094, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.unique_int_deal_changes_dedupe_new_deal_deal_id.1fb728a0fc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\"\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.830288Z", "completed_at": "2024-12-05T08:44:54.835398Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.835963Z", "completed_at": "2024-12-05T08:44:54.869463Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042485952377319336, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.unique_int_deal_changes_dedupe_lost_reason_deal_id.9dd6535907", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_lost_reason\"\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.875440Z", "completed_at": "2024-12-05T08:44:54.879255Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.879730Z", "completed_at": "2024-12-05T08:44:54.925244Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05310201644897461, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.enpal_assessment_project.assert_unique_deal_stage", "compiled": true, "compiled_code": "-- Assert that there are no duplicate deal-stage pairs in the deal changes table\nSELECT\n    COUNT(*),\n    deal_id,\n    stage_id\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\"\nGROUP BY\n    deal_id,\n    stage_id\nHAVING COUNT(*) > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:54.941754Z", "completed_at": "2024-12-05T08:44:54.953135Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:54.953816Z", "completed_at": "2024-12-05T08:44:55.075415Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13581109046936035, "adapter_response": {"_message": "SELECT 8895", "code": "SELECT", "rows_affected": 8895}, "message": "SELECT 8895", "failures": null, "unique_id": "model.enpal_assessment_project.mrt_deals_stages", "compiled": true, "compiled_code": "-- This mart model provides a breakdown by month of all deals and their stages, minor stages, and activities.\n-- The LEFT OUTER JOIN to the deal_changes model ensures that only deals with an add_time event are included in the final report.\n    -- Of course, with different assumptions, we could easily include everything from the activity model.\n    -- but the deals that appear only in the activity table don't have an entry point via the Lead Generation stage\n    -- and that would make the business logic inconsistent.\n    -- A conversation with a stakeholder could lead to a different set of assumptions and a different report.\nWITH  __dbt__cte__int_activity_join_activity_type as (\n-- Simple intermediate model to join activity and activity_types\n-- thus providing the friendly name of the activity type for downstream models\nSELECT\n\ta.user_id,\n\ta.deal_id,\n\tt.activity_name,\n\tms.stage_id,\n\tms.minor_stage_id,\n\tt.is_active, -- this would be a mart level filter: business logic determines when to include deactivated activity types\n\ta.is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n\ta.due_time,\n\ta.month_name,\n\ta.month_number\nFROM \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity\" a\nINNER JOIN \"postgres\".\"public_pipedrive_analytics\".\"stg_pipedrive__activity_types\" t\n\tON a.activity_type = t.activity_type\nINNER JOIN \"postgres\".\"public\".\"minor_stages\" ms\n\tON t.activity_type = ms.activity_type\n),  __dbt__cte__int_deal_changes_activity as (\n-- brings in the activity data for deals in the deal_changes table with the same deal_id\n-- These will just be the ones with call activities against them\n\n-- Note that there are very few rows compared to the total number of deals\n    -- This is because there are very few matching deal ids in deal_changes and activity tables\n    -- I have looked at whether this can be an out by N error on the ids but didn't find a fix\n-- Potential problem? Why are there so many rows in the activity table with deal ids that don't exist in the deal_changes table?\n\nSELECT\n    nd.deal_id,\n    act.activity_name,\n    act.stage_id,\n    act.minor_stage_id,\n    act.is_active, -- this would be a mart level filter: business logic determines when to include deactivated activity types\n    act.is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n    act.month_number,\n    act.month_name\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\" nd\nINNER JOIN __dbt__cte__int_activity_join_activity_type act -- result of INNER JOIN is very few rows. Is it a problem?\nON nd.deal_id = act.deal_id\n), all_deal_changes_and_activity AS (\n    SELECT\n        deal_id,\n        stage_id,\n        minor_stage_id,\n        is_done, -- this would be a report level filter: analyst determines when to exclude incomplete activities\n        activity_name AS label,\n        month_name,\n        month_number\n    FROM __dbt__cte__int_deal_changes_activity\n    WHERE is_active = TRUE -- Mart level filter, most business users will ignore e.g. 'Follow Up Call' that is set to be inactive\n    UNION ALL\n    SELECT\n        deal_id,\n        stage_id,\n        NULL AS minor_stage_id,\n        NULL AS is_done,\n        label,\n        month_name,\n        month_number\n    FROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_stage\"\n)\nSELECT\n    nd.deal_id,\n    dca.stage_id,\n    dca.minor_stage_id,\n    dca.is_done,\n    dca.label,\n    dca.month_name,\n    dca.month_number\nFROM \"postgres\".\"public_pipedrive_analytics\".\"int_deal_changes_dedupe_new_deal\" nd -- Only deals from the deal_changes model (these have a created_time)\nLEFT OUTER JOIN all_deal_changes_and_activity dca -- This will pick up the minor stages/activities where they exist for this set of deals\n    ON nd.deal_id = dca.deal_id", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"mrt_deals_stages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-05T08:44:55.080833Z", "completed_at": "2024-12-05T08:44:55.084714Z"}, {"name": "execute", "started_at": "2024-12-05T08:44:55.085253Z", "completed_at": "2024-12-05T08:44:55.129781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05048966407775879, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.enpal_assessment_project.rep_sales_funnel_monthly", "compiled": true, "compiled_code": "-- ASSUMPTIONS FOR THIS MODEL:\n-- Show the number of deals in each stage of the sales funnel, for each month\n\t-- I am presenting a historical view, each deal stage at the time it happened\n\t-- (alternative would have been snapshot of final stages of each deal, that's not what I'm doing here)\n    -- Although we have models for users, they are not needed/requested in this model\n    -- Although we have models for lost deals\n        -- we are showing the stage the deal was in at the time of the activity \n        -- whether or not it was closed in the end\n        -- If it was not closed in the end, it just doesn't get counted in the Closing or later stages\n        -- so it doesn't appear necessary to use the lost reasons model\n\t-- As noted in the intermediate model, we are excluding inactive activities\n\t-- As noted in the intermediate model, there are hardly any activities with deal_ids also in the deal_changes table\n\t\t-- this results in very entries for steps 2.1 and 3.1 (only two, in fact)\n\n-- create the funnel steps as requested\nWITH funnel_step_from_stages AS (\n\tSELECT\n\t\tdeal_id,\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tCONCAT(stage_id, \n\t\t\tCASE\n\t\t\t\tWHEN minor_stage_id IS NULL THEN ''\n\t\t\t\tELSE CONCAT('.', minor_stage_id)\n\t\t\tEND\n\t\t) AS funnel_step,\n\t\tlabel AS kpi_name\n\tFROM \"postgres\".\"public_pipedrive_analytics\".\"mrt_deals_stages\" AS funnel\n    WHERE COALESCE(is_done, TRUE) -- report level filter: exclude incomplete activities\n),\n-- aggregate CTE then order, to avoid having to keep the order columns in the view\nmonthly_agg AS (\n\tSELECT\n\t\tCOUNT(deal_id) AS deals_count,\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tfunnel_step,\n\t\tkpi_name\n\tFROM funnel_step_from_stages\n\tGROUP BY\n\t\tmonth_number,\n\t\tmonth_name,\n\t\tfunnel_step,\n\t\tkpi_name\n)\n-- final query with ordering\nSELECT\n\tmonth_name AS month,\n\tkpi_name,\n\tfunnel_step,\n\tdeals_count\n\tFROM monthly_agg\nORDER BY month_number, funnel_step", "relation_name": "\"postgres\".\"public_pipedrive_analytics\".\"rep_sales_funnel_monthly\""}], "elapsed_time": 2.2510058879852295, "args": {"source_freshness_run_project_hooks": false, "profiles_dir": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment", "partial_parse": true, "empty": false, "show_resource_report": false, "cache_selected_only": false, "export_saved_queries": false, "include_saved_query": false, "invocation_command": "dbt build", "exclude_resource_types": [], "macro_debugging": false, "introspect": true, "exclude": [], "require_resource_names_without_spaces": false, "static_parser": true, "favor_state": false, "select": [], "warn_error_options": {"include": [], "exclude": []}, "which": "build", "version_check": true, "log_format": "default", "log_format_file": "debug", "defer": false, "indirect_selection": "eager", "use_colors_file": true, "strict_mode": false, "require_explicit_package_overrides_for_builtin_materializations": true, "show": false, "log_level_file": "debug", "printer_width": 80, "vars": {}, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "resource_types": [], "print": true, "use_colors": true, "send_anonymous_usage_stats": true, "populate_cache": true, "write_json": true, "enable_legacy_logger": false, "log_level": "info", "log_path": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment/logs", "quiet": false, "project_dir": "/Users/julian/Documents/hatvalues_repo/dbt_enpal_assessment"}}